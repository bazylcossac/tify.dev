generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @default(uuid())
  name            String
  username        String      @default("")
  email           String      @unique
  image           String
  backgroundImage String      @default("")
  posts           Post[]
  Comments        Comments[]
  LikeUsers       LikeUsers[]
  follower        Followers[] @relation("follower")
  followed        Followers[] @relation("followed")
  premium         Boolean     @default(false)
  Message         Message[]
}

model Followers {
  id         String @id @default(uuid())
  follower   User   @relation("follower", fields: [followerId], references: [id]) /// 
  followerId String
  followed   User   @relation("followed", fields: [followedId], references: [id]) /// 
  followedId String
}

model LikeUsers {
  id              String  @id @default(uuid())
  likedPostUser   User    @relation(fields: [likedPostUserId], references: [id])
  likedPostUserId String
  Post            Post?   @relation(fields: [likedPostId], references: [postId])
  likedPostId     String?
}

model Post {
  postId    String      @id @default(uuid())
  comments  Comments[]
  postText  String
  userId    String
  media     Media[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  likes     Int
  stars     Int
  LikeUsers LikeUsers[]
  User      User        @relation(fields: [userId], references: [id])
}

model Media {
  id                String    @id @default(uuid())
  type              String
  url               String
  post              Post      @relation(fields: [postId], references: [postId])
  postId            String
  createdAt         DateTime  @default(now())
  Comments          Comments? @relation(fields: [commentsCommentId], references: [commentId])
  commentsCommentId String?
}

model Comments {
  commentId        String   @id @default(uuid())
  commentText      String
  postId           String
  commentMediaUrl  String
  commentMediaType String
  userName         String
  userEmail        String
  userImage        String
  media            Media[]
  post             Post     @relation(fields: [postId], references: [postId])
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  createdAt        DateTime @default(now())
}

// DODAC TE OPCJE ZEBY NIE WYKONUWAC ZAPYRTANIA PO DANE USERA
model Message {
  messageId   String   @id @default(uuid())
  userId      String
  userName    String
  userImage   String
  userPremium Boolean
  message     String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
}
